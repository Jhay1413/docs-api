generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String
  lastName         String
  assignedDivision String
  assignedPosition String
  assignedSection  String?
  dateStarted      String
  jobStatus        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accountId        String       @unique
  contactNumber    String
  imageUrl         String?
  birthDate        String
  employeeId       String
  middleName       String?
  account          UserAccounts @relation(fields: [accountId], references: [id])
}

model UserAccounts {
  id                    String         @id @default(uuid())
  password              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  email                 String         @unique
  accountRole           Roles          @default(GUEST)
  accountStatus         Status         @default(ACTIVE)
  forwardedNotification Notification[] @relation("ForwardedNotification")
  receiveNotification   Notification[] @relation("ReceivingNotification")
  forwarded             Transaction[]  @relation("ForwardedTransactions")
  ReceivingTransaction  Transaction[]  @relation("ReceivingTransactions")
  userInfo              UserInfo?
}

model Attachment {
  id               String      @id @default(uuid())
  fileName         String
  fileUrl          String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  remarks          String?
  fileOriginalName String?
  transactionId    String
  fileStatus       String?
  fileType         FileType    @default(INITIAL_DOC)
  transactions     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Company {
  id              String           @id @default(uuid())
  companyName     String
  companyAddress  String
  companyId       String           @unique
  email           String?
  contactPersonId String?          @unique
  contactPersons  ContactPerson?   @relation(fields: [contactPersonId], references: [id])
  companyProjects CompanyProject[]
  transaction     Transaction[]
}

model CompanyProject {
  id              String         @id @default(uuid())
  projectName     String
  projectAddress  String
  companyId       String
  date_expiry     DateTime?
  retainer        Boolean
  projectId       String         @unique
  email           String?
  contactPersonId String?        @unique
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactPersons  ContactPerson? @relation(fields: [contactPersonId], references: [id])
  transaction     Transaction[]
}

model ContactPerson {
  id               String          @id @default(uuid())
  name             String
  contactNumber    String
  companyProjectId String?
  email            String?
  company          Company?
  companyProject   CompanyProject?
}

model Transaction {
  id                String              @id @unique @default(uuid())
  transactionId     String              @unique
  documentType      String
  subject           String
  dueDate           DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  documentSubType   String
  team              String
  status            String
  priority          String
  companyId         String
  projectId         String
  remarks           String
  dateForwarded     DateTime
  dateReceived      DateTime?
  originDepartment  String
  targetDepartment  String
  receiverId        String?
  forwarderId       String
  receiver          UserAccounts?        @relation("ReceivingTransactions", fields: [receiverId], references: [id])
  attachments       Attachment[]
  completeStaffWork CompleteStaffWork[]
  notifications     Notification[]
  company           Company             @relation(fields: [companyId], references: [id])
  forwarder         UserAccounts        @relation("ForwardedTransactions", fields: [forwarderId], references: [id])
  project           CompanyProject      @relation(fields: [projectId], references: [id])
  transactionLogs   TransactionLogs[]
}

model TransactionLogs {
  id               String      @id @default(uuid())
  transactionId    String
  documentType     String
  subject          String
  dueDate          DateTime
  documentSubType  String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  team             String
  status           String
  priority         String
  company          String
  project          String
  receiver         String?
  receiverId       String?
  remarks          String
  originDepartment String
  targetDepartment String
  dateForwarded    DateTime
  dateReceived     DateTime?
  attachments      String      @default("")
  forwarder        String
  transaction      Transaction @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, receiverId, dateForwarded], name: "refId")
}

model CompleteStaffWork {
  id            String       @id @default(uuid())
  date          DateTime
  remarks       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  transactionId String?
  attachmentUrl String
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Notification {
  id            String       @id @default(uuid())
  message       String
  createdAt     DateTime     @default(now())
  receiverId    String
  forwarderId   String
  isRead        Boolean
  transactionId String
  forwarder     UserAccounts @relation("ForwardedNotification", fields: [forwarderId], references: [id])
  receiver      UserAccounts @relation("ReceivingNotification", fields: [receiverId], references: [id])
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
}

enum Roles {
  SUPERADMIN
  ADMIN
  TL
  CH
  GUEST
  RECORDS
  MANAGER
  QA
}

enum Status {
  ACTIVE
  INACTIVE
  DISABLE
}

enum FileType {
  INITIAL_DOC
  FOLLOWED_UP
  FOR_ARCHIEVE
  FOR_REVIEW
}
