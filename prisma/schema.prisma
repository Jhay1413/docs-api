generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  SUPERADMIN
  ADMIN
  TL
  CH
  RECORDS
  MANAGER
  GUEST
}

enum Status {
  ACTIVE
  INACTIVE
  DISABLE
}

enum FileType {
  INITIAL_DOC
  FOLLOWED_UP
  FOR_ARCHIEVE
  FOR_REVIEW
}

model UserInfo {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String
  lastName         String
  assignedDivision String
  assignedPosition String
  assignedSection  String?
  dateStarted      String
  jobStatus        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accountId        String       @unique
  contactNumber    String
  imageUrl         String?
  birthDate        String
  employeeId       String
  middleName       String?
  account          UserAccounts @relation(fields: [accountId], references: [id])
}

model UserAccounts {
  id            String        @id @default(uuid())
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  email         String        @unique
  accountRole   Roles         @default(GUEST)
  received      Transaction[] @relation("ReceivedDocuments")
  forwarded     Transaction[] @relation("ForwardedDocuments")
  userInfo      UserInfo?
  accountStatus Status        @default(ACTIVE)
}

model Attachment {
  id                String           @id @default(uuid())
  fileName          String
  fileUrl           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  remarks           String?
  fileOriginalName  String?
  fileStatus        String?
  fileType          FileType         @default(INITIAL_DOC)
  transactions      Transaction      @relation(fields: [transactionId], references: [transactionId])
  transactionId     String
  transactionLogs   TransactionLogs? @relation(fields: [transactionLogsId], references: [id])
  transactionLogsId String?
}

model Company {
  id              String           @id @default(uuid())
  companyId       String           @unique
  companyName     String
  companyAddress  String
  email           String?
  companyProjects CompanyProject[]
  contactPersonId String?          @unique
  contactPersons  ContactPerson?   @relation(fields: [contactPersonId], references: [id])
  transaction     Transaction[]
}

model CompanyProject {
  id              String         @id @default(uuid())
  projectId       String         @unique
  projectName     String
  projectAddress  String
  retainer        Boolean
  email           String?
  date_expiry     DateTime?
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  contactPersonId String?        @unique
  contactPersons  ContactPerson? @relation(fields: [contactPersonId], references: [id])
  transaction     Transaction[]
}

model ContactPerson {
  id               String          @id @default(uuid())
  name             String
  contactNumber    String
  email            String?
  company          Company?
  companyProject   CompanyProject?
  companyProjectId String?
}

model Transaction {
  id              String   @id @default(uuid())
  transactionId   String   @unique
  documentType    String
  subject         String
  dueDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  documentSubType String
  team            String
  status          String
  priority        String

  companyId String

  projectId        String
  forwardedTo      String
  remarks          String
  receivedById     String?
  forwardedById    String
  dateForwarded    DateTime
  dateReceived     DateTime?
  originDepartment String
  targetDepartment String
  forwardedByRole  String       @default("")
  attachments      Attachment[]

  transactionLogs TransactionLogs[]
  forwarder       UserAccounts      @relation("ReceivedDocuments", fields: [forwardedById], references: [id])
  receive         UserAccounts?     @relation("ForwardedDocuments", fields: [receivedById], references: [id])
  project         CompanyProject    @relation(fields: [projectId], references: [id])
  company         Company           @relation(fields: [companyId], references: [id])
}

model TransactionLogs {
  id               String       @id @default(uuid())
  transactionId    String
  documentType     String
  subject          String
  dueDate          DateTime
  documentSubType  String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  team             String
  status           String
  priority         String
  company          String
  project          String
  forwardedTo      String
  remarks          String
  receivedBy       String?
  forwardedBy      String
  dateForwarded    DateTime
  dateReceived     DateTime?
  originDepartment String
  targetDepartment String
  forwardedByRole  String
  attachments      Attachment[]
  transaction      Transaction  @relation(fields: [transactionId], references: [id])
}
