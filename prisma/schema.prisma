generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String
  lastName         String
  assignedDivision String
  assignedPosition String
  assignedSection  String?
  dateStarted      String
  jobStatus        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accountId        String       @unique
  contactNumber    String
  imageUrl         String?
  birthDate        String
  employeeId       String
  middleName       String?
  account          UserAccounts @relation(fields: [accountId], references: [id])
}

model UserAccounts {
  id                    String         @id @default(uuid())
  password              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  email                 String         @unique
  accountRole           Roles          @default(GUEST)
  accountStatus         Status         @default(ACTIVE)
  forwardedNotification Notification[] @relation("ForwardedNotification")
  receiveNotification   Notification[] @relation("ReceivingNotification")
  ticketsReceived       Ticket[]       @relation("TicketReceiver")
  ticketsRequestee      Ticket[]       @relation("TicketRequestee")
  ticketsSent           Ticket[]       @relation("TicketSender")
  forwarded             Transaction[]  @relation("ForwardedTransactions")
  ReceivingTransaction  Transaction[]  @relation("ReceivingTransactions")
  userInfo              UserInfo?
}

model Attachment {
  id               String      @id @default(uuid())
  fileName         String
  fileUrl          String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  remarks          String?
  fileOriginalName String?
  transactionId    String
  fileStatus       String?
  fileType         FileType    @default(INITIAL_DOC)
  transactions     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Company {
  id              String           @id @default(uuid())
  companyName     String
  companyAddress  String
  companyId       String           @unique
  email           String?
  contactPersonId String?          @unique
  contactPersons  ContactPerson?   @relation(fields: [contactPersonId], references: [id])
  companyProjects CompanyProject[]
  transaction     Transaction[]
}

model CompanyProject {
  id              String         @id @default(uuid())
  projectName     String
  projectAddress  String
  companyId       String
  date_expiry     DateTime?
  retainer        Boolean
  projectId       String         @unique
  email           String?
  contactPersonId String?        @unique
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactPersons  ContactPerson? @relation(fields: [contactPersonId], references: [id])
  tickets         Ticket[]
  transaction     Transaction[]
}

model ContactPerson {
  id               String          @id @default(uuid())
  name             String
  contactNumber    String
  companyProjectId String?
  email            String?
  company          Company?
  companyProject   CompanyProject?
}

model Transaction {
  id                String              @id @unique @default(uuid())
  transactionId     String              @unique
  documentType      String
  subject           String
  dueDate           DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  documentSubType   String
  team              String
  status            String
  priority          String
  companyId         String
  projectId         String
  remarks           String
  dateForwarded     DateTime
  dateReceived      DateTime?
  originDepartment  String
  targetDepartment  String
  receiverId        String?
  forwarderId       String
  percentage        Int                 @default(0)
  category          String              @default("")
  dateExpiry        DateTime?
  attachments       Attachment[]
  completeStaffWork CompleteStaffWork[]
  notifications     Notification[]
  tickets           Ticket[]
  company           Company             @relation(fields: [companyId], references: [id])
  forwarder         UserAccounts        @relation("ForwardedTransactions", fields: [forwarderId], references: [id])
  project           CompanyProject      @relation(fields: [projectId], references: [id])
  receiver          UserAccounts?       @relation("ReceivingTransactions", fields: [receiverId], references: [id])
  transactionLogs   TransactionLogs[]
}

model TransactionLogs {
  id               String      @id @default(uuid())
  transactionId    String
  documentType     String
  subject          String
  dueDate          DateTime
  documentSubType  String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  team             String?
  status           String
  priority         String
  company          String
  project          String
  dateExpiry       DateTime?
  receiver         String?
  receiverId       String?
  remarks          String
  forwarder        String
  originDepartment String
  targetDepartment String
  dateForwarded    DateTime
  dateReceived     DateTime?
  attachments      String      @default("")
  percentage       Int         @default(0)
  transaction      Transaction @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, receiverId, dateForwarded], name: "refId")
}

model CompleteStaffWork {
  id            String       @id @default(uuid())
  date          DateTime
  remarks       String
  transactionId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  attachments   String[]
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Notification {
  id            String       @id @default(uuid())
  message       String
  createdAt     DateTime     @default(now())
  receiverId    String
  forwarderId   String
  transactionId String
  isRead        Boolean
  dateRead      DateTime?
  forwarder     UserAccounts @relation("ForwardedNotification", fields: [forwarderId], references: [id])
  receiver      UserAccounts @relation("ReceivingNotification", fields: [receiverId], references: [id])
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
}

model Ticket {
  id             String          @id @default(uuid())
  ticketId       String          @unique
  subject        String
  section        String
  status         String
  remarks        String?
  priority       String
  dueDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  transactionId  String?
  projectId      String?
  senderId       String
  receiverId     String
  requestDetails String
  division       String
  requesteeId    String
  requestType    String
  dateForwarded  DateTime
  dateReceived   DateTime?
  attachments    String[]
  project        CompanyProject? @relation(fields: [projectId], references: [id])
  receiver       UserAccounts    @relation("TicketReceiver", fields: [receiverId], references: [id])
  requestee      UserAccounts    @relation("TicketRequestee", fields: [requesteeId], references: [id])
  sender         UserAccounts    @relation("TicketSender", fields: [senderId], references: [id])
  transaction    Transaction?    @relation(fields: [transactionId], references: [id])
  ticketLogs     TicketLogs[]
}

model TicketLogs {
  id            String    @id @default(uuid())
  ticketId      String
  status        String
  priority      String
  dateForwarded DateTime
  dateReceived  DateTime?
  sender        String
  receiver      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  remarks       String?
  attachments   String[]
  receiverId    String
  senderId      String
  ticket        Ticket    @relation(fields: [ticketId], references: [id])

  @@unique([ticketId, receiverId, senderId, dateForwarded], name: "refId")
}

enum Roles {
  SUPERADMIN
  ADMIN
  TL
  CH
  GUEST
  RECORDS
  MANAGER
  QA
  DMS
  FINANCE
}

enum Status {
  ACTIVE
  INACTIVE
  DISABLE
}

enum FileType {
  INITIAL_DOC
  FOLLOWED_UP
  APPROVE
}
