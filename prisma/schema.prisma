generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String
  lastName         String
  assignedDivision String
  assignedPosition String
  assignedSection  String?
  dateStarted      String
  jobStatus        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  accountId        String       @unique
  contactNumber    String
  imageUrl         String?
  birthDate        String
  employeeId       String
  middleName       String?
  account          UserAccounts @relation(fields: [accountId], references: [id])
}

model UserAccounts {
  id             String           @id @default(uuid())
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  accountRole    Roles            @default(GUEST)
  accountStatus  Status           @default(ACTIVE)
  received       Transaction[]    @relation("ReceivedDocuments")
  forwarded      Transaction[]    @relation("ForwardedDocuments")
  userInfo       UserInfo?
}

model Attachment {
  id               String      @id @default(uuid())
  fileName         String
  fileUrl          String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  remarks          String?
  fileOriginalName String?
  transactionId    String
  fileStatus       String?
  fileType         FileType    @default(INITIAL_DOC)
  transactions     Transaction @relation(fields: [transactionId], references: [transactionId],onDelete: Cascade)
}

model Company {
  id              String           @id @default(uuid())
  companyName     String
  companyAddress  String
  companyId       String           @unique
  email           String?
  contactPersonId String?          @unique
  contactPersons  ContactPerson?   @relation(fields: [contactPersonId], references: [id])
  companyProjects CompanyProject[]
  transaction     Transaction[]
}

model CompanyProject {
  id              String         @id @default(uuid())
  projectName     String
  projectAddress  String
  companyId       String
  date_expiry     DateTime?
  retainer        Boolean
  projectId       String         @unique
  email           String?
  contactPersonId String?        @unique
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactPersons  ContactPerson? @relation(fields: [contactPersonId], references: [id])
  transaction     Transaction[]
}

model ContactPerson {
  id               String          @id @default(uuid())
  name             String
  contactNumber    String
  companyProjectId String?
  email            String?
  company          Company?
  companyProject   CompanyProject?
}

model Transaction {
  id               String            @id @default(uuid())
  transactionId    String            @unique
  documentType     String
  subject          String
  dueDate          DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  documentSubType  String
  team             String
  status           String
  priority         String
  companyId        String
  projectId        String
  forwardedTo      String
  remarks          String
  dateForwarded    DateTime
  dateReceived     DateTime?
  forwardedByRole  String            @default("")
  originDepartment String
  targetDepartment String
  forwardedById    String
  receivedById     String?
  attachments      Attachment[]
  company          Company           @relation(fields: [companyId], references: [id])
  forwarder        UserAccounts      @relation("ReceivedDocuments", fields: [forwardedById], references: [id])
  project          CompanyProject    @relation(fields: [projectId], references: [id])
  receive          UserAccounts?     @relation("ForwardedDocuments", fields: [receivedById], references: [id])
  completeStaffWork CompleteStaffWork[] 
  transactionLogs  TransactionLogs[]
}

model TransactionLogs {
  id               String      @id @default(uuid())
  transactionId    String
  documentType     String
  subject          String
  dueDate          DateTime
  documentSubType  String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  team             String
  status           String
  priority         String
  company          String
  project          String
  forwardedTo      String
  remarks          String
  forwardedBy      String
  originDepartment String
  targetDepartment String
  forwardedByRole  String
  dateForwarded    DateTime
  dateReceived     DateTime?
  receivedBy       String?
  attachments      String      @default("")
  transaction      Transaction @relation(fields: [transactionId], references: [id])
}


model CompleteStaffWork{
  id String @id @default(uuid())
  date DateTime 
  remarks String 
  attachmentUrl String
  transaction Transaction? @relation(fields:[transactionId], references: [id])
  transactionId String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

}


enum Roles {
  SUPERADMIN
  ADMIN
  TL
  CH
  GUEST
  RECORDS
  MANAGER
}

enum Status {
  ACTIVE
  INACTIVE
  DISABLE
}

enum FileType {
  INITIAL_DOC
  FOLLOWED_UP
  FOR_ARCHIEVE
  FOR_REVIEW
}
